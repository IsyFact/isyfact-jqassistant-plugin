<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/analysis/rules/schema/v1.1">

    <group id="isyfact:core:Verbindlich">
        <includeConstraint refId="isyfact:core:BeanNichtPerNameAuslesen"/>
    </group>

    <group id="isyfact:core:Empfohlen">
        <includeConstraint refId="isyfact:core:NamenskonventionGeschaeftsobjekt"/>
        <includeConstraint refId="isyfact:core:KomponenteZugriffPersistenz"/>
    </group>

    <concept id="isyfact:core:CoreType">
        <description>Markiert Klassen im Layer "core" mit "Core:CoreType".</description>
        <cypher><![CDATA[
            MATCH
              (:Layer {name: "core"})-[:CONTAINS*]->(coreType:Type)
            SET
              coreType:Core:CoreType
            RETURN
              count(coreType)
        ]]></cypher>
    </concept>

    <concept id="isyfact:core:Geschaeftsobjekt">
        <requiresConcept refId="isyfact:core:CoreType"/>
        <description>
            Unter Geschäftsobjekten werden nicht-persistente Objekte verstanden, die in Schnittstellen im
            Anwendungskern verwendet werden. Sie liegen in den Packages "eingabedaten", "ausgabedaten" oder
            "daten" innerhalb des Packages einer Komponente.
        </description>
        <cypher><![CDATA[
            MATCH
              (datenPackage:Package)-[:CONTAINS]->(ct:CoreType)
            WHERE
              datenPackage.name = "eingabedaten" OR
              datenPackage.name = "ausgabedaten" OR
              datenPackage.name = "daten"
            SET
              ct:Core:Geschaeftsobjekt
            RETURN
             count(ct)
        ]]></cypher>
    </concept>

    <constraint id="isyfact:core:BeanNichtPerNameAuslesen">
        <description>
            Über den Anwendungskontext könnten Beans explizit per Namen ausgelesen werden. Dies ist
            mit einer Ausnahme verboten. Die Namen von Beans sollen nicht im Anwendungscode verwendet werden.
            Die Ausnahme gilt für den Zugriff von einem Anwendungskontext auf einen anderen (in Zusammenhang
            mit dem DispatcherServlet).</description>
        <cypher><![CDATA[
            MATCH
              (t:ApplicationType)-[:DECLARES]->(m:Method)-[i:INVOKES]->(getBean:Method),
              (applicationContext:Type)-[:DECLARES]->(getBean)
            WHERE
              applicationContext.fqn = "org.springframework.context.ApplicationContext"
              AND getBean.signature STARTS WITH "java.lang.Object getBean(java.lang.String"
            RETURN
              t AS Klasse, m AS Methode, i.lineNumber AS Zeilennummer
        ]]></cypher>
    </constraint>

    <constraint id="isyfact:core:NamenskonventionGeschaeftsobjekt">
        <requiresConcept refId="isyfact:core:Geschaeftsobjekt"/>

        <requiresParameter name="patternNameGeschaeftsobjekt" type="String"/>

        <description>Der Name von Geschäftsobjekten hält sich an die konfigurierte Konvention</description>
        <cypher><![CDATA[
            MATCH
              (go:Geschaeftsobjekt)
            WHERE
              NOT go.name =~ {patternNameGeschaeftsobjekt}
            RETURN
              go AS AbweichenderNameGeschaeftsobjekt
        ]]></cypher>
    </constraint>

    <constraint id="isyfact:core:KomponenteZugriffPersistenz">
        <requiresConcept refId="isyfact:layer:DefinedLayer"/>
        <requiresConcept refId="isyfact:persistence:PersistenceType"/>
        <description>
            Die Komponenten des Anwendungskerns besitzen die Datenhoheit auf Objekte, die ihnen eindeutig
            zuzuordnen sind. Diese Objekte stammen aus den korrespondierenden Komponenten in der
            Persistenz-Schicht. Nur die korrespondierende Anwendungskern-Komponente darf Änderungen an den
            entsprechenden persistenten Objekten vornehmen.
            Eine Ausnahme hierzu bildet die Komponente Basisdaten: Sie gibt die Entitäten an andere
            Komponenten weiter, welche diese verändern und befüllen dürfen.
        </description>
        <cypher><![CDATA[
            MATCH
              (:Layer {name: "core"})-[:CONTAINS]->(corePackage:Package)-[:CONTAINS]->(i:Interface)-[]->(pt:PersistenceType),
              (:Layer {name: "persistence"})-[:CONTAINS]->(persistencePackage:Package)-[:CONTAINS*]->(pt)
            WHERE
              corePackage.name <> persistencePackage.name AND
              persistencePackage.name <> "basisdaten"
            RETURN DISTINCT
              corePackage.name AS AWKKomponente, persistencePackage.name AS PersistenzKomponente
        ]]></cypher>
    </constraint>

</jqa:jqassistant-rules>
